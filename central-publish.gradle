apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getWebsiteUrl() {
    return "https://github.com/bingoogolapple/${PUBLISH_AAR_GITHUB_REPOSITORIES_NAME}"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    groupId = 'cn.bingoogolapple'
                    artifactId = PUBLISH_AAR_ARTIFACT_ID
                    version = VERSION_NAME
                    packaging 'aar'
                    name PUBLISH_AAR_DESCRIPTION
                    description PUBLISH_AAR_DESCRIPTION
                    url getWebsiteUrl()
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'bingoogolapple'
                            name 'bingoogolapple'
                            email 'bingoogolapple@gmail.com'
                        }
                    }
                    scm {
                        connection "${getWebsiteUrl()}".replace("https://", "scm:git:git://")
                        developerConnection "${getWebsiteUrl()}".replace("https://", "scm:git:git://")
                        url getWebsiteUrl()
                    }
                    issueManagement {
                        system 'GitHub'
                        url "${getWebsiteUrl()}/issues"
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}
