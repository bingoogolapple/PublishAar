apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = PUBLISH_AAR_GROUP_ID
                pom.artifactId = PUBLISH_AAR_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    packaging 'aar'
                    name PUBLISH_AAR_DESCRIPTION
                    description PUBLISH_AAR_DESCRIPTION
                    url PUBLISH_AAR_WEBSITE_URL
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id PUBLISH_AAR_DEVELOPER_ID
                            name PUBLISH_AAR_DEVELOPER_NAME
                            email PUBLISH_AAR_DEVELOPER_EMAIL
                        }
                    }
                    scm {
                        connection "${PUBLISH_AAR_WEBSITE_URL}".replace("https://", "scm:git:git://")
                        developerConnection "${PUBLISH_AAR_WEBSITE_URL}".replace("https://", "scm:git:git://")
                        url PUBLISH_AAR_WEBSITE_URL
                    }
                    issueManagement {
                        system 'GitHub'
                        url "${PUBLISH_AAR_WEBSITE_URL}/issues"
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task apklib(type: Zip){
        appendix = extension = 'apklib'

        from 'AndroidManifest.xml'
        into('res') {
            from 'res'
        }
        into('src') {
            from 'src'
        }
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        options.encoding = "UTF-8"
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        failOnError = false
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task jar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
        archives apklib
        archives jar
    }
}
